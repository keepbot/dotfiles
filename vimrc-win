""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                       ______
"                      __   ____(_)______ ___
"                     __ | / /_  /__  __ `__ \
"                     __ |/ /_  / _  / / / / /
"                     _____/ /_/  /_/ /_/ /_/
"
" ------------------------------------------------------------------------------

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Initial settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set runtimepath=~/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Basic settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Fix for: "[[2;2R"
set t_u7=

" Turn on vim features (no compatible with vi)
set nocompatible

" Enable per-directory .vimrc files and disable unsafe commands in them
set exrc
set secure

" Better line breaks
set breakindent

" Enable history
set history=1000

" Enable : in keywords
set iskeyword=@,~,48-57,_,192-255

" Enable hidden buffers
set hidden

" Disable visual bell
set noerrorbells
set novisualbell
set t_vb=

" Set grep prorgram
set grepprg=grep\ -nH\ $*

" Enable mouse in all modes
set mouse=nv
set mousehide
set mousemodel=popup

" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamed,unnamedplus

" Save clipboard on exit
autocmd VimLeave * call system("xsel -ib", getreg('+'))

" Allow cursor keys in insert mode
set esckeys

" Don’t add empty newlines at the end of files
set binary
set noeol

" Allow backspace in insert mode
set backspace=indent,eol,start

" Don’t show the intro message when starting Vim
set shortmess=atI

" Ignore case of searches
set ignorecase

" Respect modeline in files
set modeline
set modelines=4

" Don’t reset cursor to start of line when moving around.
set nostartofline

" Show the cursor position
set ruler

" Show the current mode
set showmode

" Show the (partial) command as it’s being typed
set showcmd

" Reload file without prompting if it has changed on disk.
" Will still prompt if there is unsaved text in the buffer.
set autoread

" Auto completiion files: prompt, don't auto pick.
set wildmode=longest,list

" Use one space, not two, after punctuation.
set nojoinspaces

" Spelling
" set spell
" set spelllang=en,fromtags

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Key bindings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Change mapleader
let mapleader=","

" Disable help
noremap <F1> ""

" Navigation with C-up / C-down
map <C-down> gj
map <C-up> gk

" Switch between the last two files
nnoremap <Leader><Leader> <c-^>

" Run commands that require an interactive shell
nnoremap <Leader>r :RunInInteractiveShell<space>

" Get off my lawn
" nnoremap <Left>   :echoe "Use h"<CR>
" nnoremap <Right>  :echoe "Use l"<CR>
" nnoremap <Up>     :echoe "Use k"<CR>
" nnoremap <Down>   :echoe "Use j"<CR>

" Create a split on the given side.
" From http://technotales.wordpress.com/2010/04/29/vim-splits-a-guide-to-doing-exactly-what-you-want/ via joakimk.
nmap <leader><C-H>    :leftabove  vsp<CR>
nmap <leader><left>   :leftabove  vsp<CR>
nmap <leader><C-L>    :rightbelow vsp<CR>
nmap <leader><right>  :rightbelow vsp<CR>
nmap <leader><C-J>    :leftabove  sp<CR>
nmap <leader><up>     :leftabove  sp<CR>
nmap <leader><C-K>    :rightbelow sp<CR>
nmap <leader><down>   :rightbelow sp<CR>

"split navigations
nnoremap <C-H> <C-W><C-H>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>

" Working with tabs
"map <S-t> :tabprevious<cr>
"nmap <S-t> :tabprevious<cr>
"imap <S-t> <ESC>:tabprevious<cr>i
map <S-Tab> :tabnext<cr>
nmap <S-Tab> :tabnext<cr>
imap <S-Tab> <ESC>:tabnext<cr>i
nmap <C-t> :tabnew<cr>
imap <C-t> <ESC>:tabnew<cr>

" Strip trailing whitespace (,ss)
function! StripWhitespace()
	let save_cursor = getpos(".")
	let old_query = getreg('/')
	:%s/\s\+$//e
	call setpos('.', save_cursor)
	call setreg('/', old_query)
endfunction
noremap <leader>ss :call StripWhitespace()<CR>

" Save a file as root (,W)
noremap <leader>W :w !sudo tee % > /dev/null<CR>

" Paste
noremap <leader>ii :set paste<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Display
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Background
set background=dark
"set background=light

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

" Set colors
colorscheme gruvbox

" Make it obvious where 80 characters is
set textwidth=80
set colorcolumn=80
set wrap

" Enable line numbers
set number

" Use relative line numbers
if exists("&relativenumber")
	set relativenumber
	au BufReadPost * set relativenumber
endif
noremap <leader>. :set relativenumber!<CR> :set number!<CR>

" Set visible lines / columns before and after cursor
set scrolloff=3
set sidescroll=5

" Set wrap long lines by word, but not by letter
set lbr

" Hide conceal chars
set conceallevel=2

" Show the filename in the window titlebar
set title

" Show matching brackets
set showmatch

" Highlight searches
set hlsearch

" Highlight dynamically as pattern is typed
set incsearch

" Disable toolbars
if has("gui_running")
	set guioptions-=T
endif

" Optimize for fast terminal connections
set ttyfast

" Highlight current line
set cursorline

" Automatic sync (slow!)
" autocmd BufEnter * syntax sync fromstart

" Max 500 lines for syntax
" syntax sync minlines=500

" Whitespace symbols
if has("multi_byte")
" set lcs=tab:»·,trail:·,nbsp:·
" set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
" set lcs=tab:\⁝\ ,trail:•,extends:>,precedes:<,nbsp:¤"
"	set lcs=tab:»·,trail:•,extends:>,precedes:<,nbsp:¤"
	let &sbr = nr2char(8618).' '
else
	set lcs=tab:>\ ,extends:>,precedes:<,trail:-
	let &sbr = '+++ '
endif

function! UpdateLcs()
	if (&previewwindow)
		setlocal nolist
	endif
endfunction

autocmd BufEnter,BufWinEnter,WinEnter,CmdwinEnter * call UpdateLcs()
set list

" Highlight extra whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
autocmd BufWinEnter *{cpp,h,hpp,php,python,css,js,html,xhtml,htm} match ExtraWhitespace /\s\+$\| \+\ze\t/
autocmd InsertEnter *{cpp,h,hpp,php,python,css,js,html,xhtml,htm} match ExtraWhitespace /\s\+\%#\@<!$\| \+\ze\t\%#\@<!/
autocmd InsertLeave *{cpp,h,hpp,php,python,css,js,html,xhtml,htm} match ExtraWhitespace /\s\+$\| \+\ze\t/
autocmd BufWinLeave *{cpp,h,hpp,php,python,css,js,html,xhtml,htm} call clearmatches()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Status Line
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction

set laststatus=2
set statusline=
set statusline+=%#PmenuSel#
" set statusline+=%{exists('g:loaded_fugitive')?fugitive#statusline():''}\
"set statusline+=%{StatuslineGit()}
" set statusline+=%#LineNr#
set statusline+=%#CursorColumn#
set statusline+=\ %F%m%r%h%w
set statusline+=%=
set statusline+=%y\ \|\ \[%{&ff}]\ \|\ \[%{&enc}]\ \|\ %{&fenc}%=(ch:%3b\ hex:%2B)\ \|\ Col:%2c\ \|\ Line:%2l/%L\ \|\ [%2p%%]

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Menu
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Enhance command-line completion
set wildmenu
set wildchar=<Tab>
set wildmode=longest:full,full
set wildignore=Ui_*,*.git,*.pyc

" Encoding menu
"set wildmenu
"set wcm=<Tab>
"menu Encoding.CP1251   :e ++enc=cp1251<CR>
"menu Encoding.CP866    :e ++enc=cp866<CR>
"menu Encoding.KOI8-U   :e ++enc=koi8-u<CR>
"menu Encoding.UTF-8    :e ++enc=utf-8<CR>
"map <F8> :emenu Encoding.<TAB>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Saving
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Write after buffer leave
" set autowrite

" Backup
set backup
set backupdir=~/.vim/backups,.,~/

" Tmp directory
set directory=~/.vim/tmp,~/tmp,.,/tmp

" Ask before close
set noconfirm

" Viminfo
set viminfo='50,\"500
"            |    |
"            |    + Maximum number of files for each register
"            + Save max 50 files

" Persistend undo
set undodir=~/.vim/undo
set undofile
set undolevels=2048
set undoreload=65538

" Reload file, preserve history
command! Reload %d|r|1d

" HTML
let html_number_lines = 0
let use_xhtml = 1
let html_use_css = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Formating
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set formatoptions=jroq1
" Legenda:
" jcroq1
" ||||||
" |||||+ Not break lines in insert mode
" ||||+ Formatting with gq
" |||+ Insert comment leader after 'o'
" ||+ Insert comment leader after <Enter>
" |+ Auto wrap comments using textwidth
" + Remove comment leader when joining lines if it makes sense

" Wrap on end
set wrapmargin=0
set linebreak

" Copy indent structure
set copyindent
set preserveindent

" Round to tabs
set shiftround

" Replace tabs with spaces.
"set expandtab

" Make tabs as wide as two spaces
set tabstop=2

" Make shift as wide as tabstop
set shiftwidth=2

" Indent for language
set smartindent

set display=lastline

" Adjust indent
xnoremap <Tab> >gv
au BufEnter * xnoremap <Tab> >gv
au InsertLeave * xnoremap <Tab> >gv
xmap <BS> <gv

func! RetabIndents()
	execute '%!unexpand --first-only -t '.&ts
endfunc
command! RetabIndents call RetabIndents()

func! ReformatHTML() range
	let content = join(getline(a:firstline, a:lastline), "\n")
	let baka = @a
	let baks = @/
	let @a = content
	silent execute 'new'
	silent execute 'normal "ap'
	silent execute 'set filetype=html'
	silent execute ':%s/^\s*//g'
	silent execute ':%s/\s*$//g'
	silent execute ':%s/<[^>]*>/\r&\r/g'
	silent execute ':%g/^$/d'
	silent execute 'normal 1G'
	silent execute 'normal VG'
	silent execute 'normal ='
	silent execute 'normal 1G'
	silent execute 'normal VG'
	silent execute 'normal "ay'
	silent execute ':bdelete!'
	silent execute a:firstline.','.a:lastline.'d'
	silent execute 'normal "aP'
	let @a = baka
	let @/ = baks
endfunc

command! -range=% ReformatHTML <line1>,<line2>call ReformatHTML()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Language
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Language options
"language messages en
set langmenu=en_US
let $LANG = 'en_US'
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
if (has('win32') || has('win64')) && has('gui_running')
  set encoding=cp1251 nobomb
  set termencoding=cp1251
  set guifont=Consolas:h12
else
  set encoding=utf-8 nobomb
  set termencoding=utf-8
endif
set fileencoding=utf-8

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Settings for file types
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

augroup Shebang
  autocmd BufNewFile *.awk 0put =\"#!/usr/bin/awk -f\<nl>\"|$
  autocmd BufNewFile *.bash 0put =\"#!/usr/bin/env bash \<nl>\"|$
  " autocmd BufNewFile *.\(c\|h\) 0put =\"//\<nl>// \".expand(\"<afile>:t\").\" -- \<nl>//\<nl>\"|2|start!
  " autocmd BufNewFile *.\(cc\|hh\) 0put =\"//\<nl>// \".expand(\"<afile>:t\").\" -- \<nl>//\<nl>\"|2|start!
  " autocmd BufNewFile *.\(cpp\|hpp\) 0put =\"//\<nl>// \".expand(\"<afile>:t\").\" -- \<nl>//\<nl>\"|2|start!
  autocmd BufNewFile *.js 0put =\"#!/usr/bin/env node\<nl>\"|$
  autocmd BufNewFile *.lua 0put =\"#!/usr/bin/env lua\<nl>\"|$
  autocmd BufNewFile *.make 0put =\"#!/usr/bin/make -f\<nl>\"|$
  autocmd BufNewFile *.php 0put =\"#!/usr/bin/env php\<nl>\"|$
  autocmd BufNewFile *.pl 0put =\"#!/usr/bin/env perl\<nl>\"|$
  autocmd BufNewFile *.py 0put =\"#!/usr/bin/env python\<nl># -*- coding: utf-8 -*-\<nl>\"|$
  autocmd BufNewFile *.rb 0put =\"#!/usr/bin/env ruby\<nl># -*- coding: None -*-\<nl>\"|$
  autocmd BufNewFile *.sed 0put =\"#!/usr/bin/env sed\<nl>\"|$
  autocmd BufNewFile *.sh 0put =\"#!/usr/bin/env sh\<nl>\"|$
  autocmd BufNewFile *.tex 0put =\"%&plain\<nl>\"|$
  autocmd BufNewFile *.zsh 0put =\"#!/usr/bin/env zsh\<nl>\"|$
augroup END

" c
augroup project
    autocmd!
    autocmd BufRead,BufNewFile *.h,*.c,*.hh,*.cc set filetype=c.doxygen
augroup END

" cpp
function! EnhanceCppSyntax()
	syn match cppFuncDef "::\~\?\zs\h\w*\ze([^)]*\()\s*\(const\)\?\)\?$"
endfunction
autocmd Syntax cpp call EnhanceCppSyntax()
autocmd FileType c,cpp nmap <F5> "lYml[[kw"cye'l
autocmd FileType c,cpp nmap <F6> :set paste<CR>ma:let @n=@/<CR>"lp==:s/\<virtual\>\s*//e<CR>:s/\<static\>\s*//e<CR>:s/\<explicit\>\s*//e<CR>:s/\s*=\s*[^,)]*//ge<CR>:let @/=@n<CR>'ajf(b"cPa::<Esc>f;s<CR>{<CR>}<CR><Esc>kk:nohlsearch<CR>:set nopaste<CR>
autocmd FileType c,cpp set foldmethod=indent
autocmd FileType c,cpp set foldlevel=6

" python
" autocmd BufNewFile *.py execute "set paste" | execute "normal i# -*- coding: utf-8 -*-\rfrom __future__ import unicode_literals\r" | execute "set nopaste"
autocmd BufNewFile *.py execute "set paste" | execute "normal ifrom __future__ import unicode_literals\r" | execute "set nopaste"
autocmd FileType python set completeopt=menuone,menu,preview
autocmd FileType python setlocal complete+=k
autocmd FileType python setlocal isk+=".,("
autocmd BufRead *.py setlocal makeprg=python\ -c\ \"import\ py_compile,sys;\ sys.stderr=sys.stdout;\ py_compile.compile(r'%')\"
autocmd BufRead *.py setlocal efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m
let g:python_recommended_style=0

" javascript
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType javascript set completefunc=javascriptcomplete#CompleteJS

" html
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType html set completefunc=htmlcomplete#CompleteTags
autocmd FileType html set filetype=htmldjango
autocmd FileType htmldjango vmap \tr <ESC>`>a'' %}<ESC>`<i{{% trans ''<ESC>

" css
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType css set completefunc=csscomplete#CompleteCSS


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Functions
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Convert vimrc to HTML
" Link to section: *> Section name
" Section: => Section name
function! VimrcTOHtml()
	TOhtml
	try
		silent exe '%s/&quot;\(\s\+\)\*&gt; \(.\+\)</"\1<a href="#\2" style="color: #bdf">\2<\/a></g'
	catch
	endtry

	try
		silent exe '%s/&quot;\(\s\+\)=&gt; \(.\+\)</"\1<a name="\2" style="color: #fff">\2<\/a></g'
	catch
	endtry

	exe ":write!"
	exe ":bd"
endfunction

function! ReformatXml()
	%!xmllint --format --recover --encode utf-8 - 2>/dev/null
endfunction

function! ReplaceDiacritic()
	execute "silent! " . a:firstline . "," . a:lastline . "s/Ľ/\\&#317;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/Š/\\&#352;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/Ť/\\&#356;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/Ž/\\&#381;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/ľ/\\&#318;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/š/\\&#353;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/ť/\\&#357;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/ž/\\&#382;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/Ŕ/\\&#340;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/Ĺ/\\&#313;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/Č/\\&#268;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/Ě/\\&#282;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/Ď/\\&#270;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/Ň/\\&#327;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/Ř/\\&#344;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/Ů/\\&#366;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/ŕ/\\&#341;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/ľ/\\&#314;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/č/\\&#269;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/ě/\\&#283;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/ď/\\&#271;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/ň/\\&#328;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/ř/\\&#345;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/ô/\\&#244;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/Ô/\\&#212;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/Ý/\\&#221;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/ý/\\&#253;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/Á/\\&Aacute;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/á/\\&aacute;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/É/\\&Eacute;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/é/\\&eacute;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/Í/\\&Iacute;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/í/\\&iacute;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/Ó/\\&Oacute;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/ó/\\&oacute;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/Ú/\\&Uacute;/g"
	execute "silent! " . a:firstline . "," . a:lastline . "s/ú/\\&uacute;/g"
endfunction

au BufReadPost * if getfsize(bufname("%")) > 512*1024 | set syntax= | endif

function! CleanCSS()
	try
		silent execute "%s/\\t\\+$//g"
	catch
	endtry

	try
		silent execute "%s/[ ]\\+$//g"
	catch
	endtry

	try
		silent execute "%s/\\([^ ]\\){/\\1 {/g"
	catch
	endtry

	try
		silent execute "%s/:\\([^ ]\\)\\(.*\\);/: \\1\\2;/"
	catch
	endtry
endfunction


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Finalization
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nolist

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
